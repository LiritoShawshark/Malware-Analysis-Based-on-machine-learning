import os
import pickle
import numpy as np


def get_filelist(dir, list):
    for home, dirs, files in os.walk(dir):
        for filename in files:
            fullname = os.path.join(home, filename)
            list.append([filename, fullname])


if __name__ == '__main__':
    # 载入svm
    f = open('svm.pickle', 'rb')
    svm = pickle.load(f)
    f.close()

    # 获得测试集
    filelist = []
    get_filelist('test', filelist)

    # 载入词袋
    file_bag = []
    reg_bag = []

    file = open('bag/file_bag1', mode='r', encoding='utf-8')
    while True:
        line = file.readline()
        if not line:
            break
        line = line.strip('\n')
        file_bag.append(line)
    file.close()

    reg = open('bag/reg_bag1', mode='r', encoding='utf-8')
    while True:
        line = reg.readline()
        if not line:
            break
        line = line.strip('\n')
        reg_bag.append(line)
    reg.close()

    # 长度信息
    file_len = len(file_bag)
    reg_len = len(reg_bag)
    data_len = file_len

    # exe的名字以及exe的数据条
    exe_names = []
    exe_datas = []
    for file in filelist:
        f = open(file[1], mode='r', encoding='utf-8')
        f.readline()
        while True:
            line = f.readline()
            if not line:
                break
            line = line.strip('\ufeff')
            line = line.strip('\n')
            line = line.replace('"', '')
            list = [i for i in line.split(',')]

            # list[1]为exe名，list[3]为函数名，list[4]为路径

            # 查找该行exe名是否已被记录
            n = 0
            while True:
                if n == len(exe_datas):
                    exe_names.append(list[1])
                    exe_datas.append([0 for i in range(data_len)])
                if list[1] == exe_names[n]:
                    break
                n += 1

            # 判断该行属于哪个api
            if 'CreateFile' in list[3]:
                path_name = list[4].split('\\')
                for p in path_name:
                    for i in range(file_len):
                        if p == file_bag[i]:
                            exe_datas[n][i] += 1
                            break
            '''
            elif 'RegOpenKey' in list[3]:
                path_name = list[4].split('\\')
                for p in path_name:
                    for i in range(len(reg_bag)):
                        if p == reg_bag[i]:
                            exe_datas[n][file_len + i] += 1
                            break
            else:
                print('error:' + list[1] + ' ' + list[3])
            '''
        f.close()

    # 转换为出现比例
    for i in range(len(exe_names)):
        file_sum = 0
        reg_sum = 0
        for j in range(file_len):
            file_sum += exe_datas[i][j]
        '''
        for j in range(file_len + 1, data_len):
            reg_sum += exe_datas[i][j]
        '''
        for j in range(file_len):
            try:
                exe_datas[i][j] = round(exe_datas[i][j] / file_sum, 4)
            except ZeroDivisionError as e:
                pass
        '''
        for j in range(file_len + 1, data_len):
            try:
                exe_datas[i][j] = round(exe_datas[i][j] / reg_sum, 4)
            except ZeroDivisionError as e:
                pass
        '''

    for exe in exe_datas:
        for e in exe:
            test_data.write(str(e)+',')
        test_data.write('\n')
    test_data.close()
    X = np.array(exe_datas)
    print(svm.predict(X))
